<% unless p("cf_networking.disable") %>
<%
    def db_param_path(name)
      "cf_networking.policy_server_internal.database.#{name}"
    end

    def db_param(name)
      if_p(db_param_path name) do |param|
        return param
      end.else do
        return nil
      end
    end

    def db_host
      from_property = db_param 'host'
      return from_property if !from_property.nil?

      from_link = link("database").instances[0].address
      return from_link if !from_link.nil?

      raise "must provide database link or set #{db_param_path 'host'}"
    end

    def cleanup_interval_in_seconds
      minutes = p("cf_networking.policy_cleanup_interval")
      if minutes < 1
        raise "'cf_networking.policy_cleanup_interval' must be at least 1 minute"
      end
      minutes * 60
    end
%>

<%=
    require 'json'

    toRender = {
      "listen_host" => p("cf_networking.policy_server_internal.listen_ip"),
      "log_prefix" => "cfnetworking",
      "debug_server_host" => "127.0.0.1",
      "debug_server_port" => p("cf_networking.policy_server_internal.debug_port"),
      "health_check_port" => p("cf_networking.policy_server_internal.health_check_port"),
      "internal_listen_port" => p("cf_networking.policy_server_internal.internal_listen_port"),
      "database" => {
        "user" => link("dbconn").p("cf_networking.policy_server.database.username"),
        "type" => link("dbconn").p("cf_networking.policy_server.database.type"),
        "password" => link("dbconn").p("cf_networking.policy_server.database.password"),
        "port" => link("dbconn").p("cf_networking.policy_server.database.port"),
        "database_name" => link("dbconn").p("cf_networking.policy_server.database.name"),
        "host" => db_host,
        "timeout" => p("cf_networking.policy_server_internal.connect_timeout_seconds"),
      },
      "tag_length" => link("tag_length").p("cf_networking.policy_server.tag_length"),
      "metron_address" => "127.0.0.1:#{p("cf_networking.policy_server_internal.metron_port")}",
      "log_level" => p("cf_networking.policy_server_internal.log_level"),

      # hard-coded values, not exposed as bosh spec properties
      "ca_cert_file" => "/var/vcap/jobs/policy-server-internal/config/certs/ca.crt",
      "server_cert_file" => "/var/vcap/jobs/policy-server-internal/config/certs/server.crt",
      "server_key_file" => "/var/vcap/jobs/policy-server-internal/config/certs/server.key",
      "request_timeout" => 5,
    }

    JSON.pretty_generate(toRender)
%>
<% end %>
