// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/api"
	"sync"
)

type PolicyCleaner struct {
	DeleteStalePoliciesStub        func() ([]api.Policy, error)
	deleteStalePoliciesMutex       sync.RWMutex
	deleteStalePoliciesArgsForCall []struct{}
	deleteStalePoliciesReturns     struct {
		result1 []api.Policy
		result2 error
	}
	deleteStalePoliciesReturnsOnCall map[int]struct {
		result1 []api.Policy
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PolicyCleaner) DeleteStalePolicies() ([]api.Policy, error) {
	fake.deleteStalePoliciesMutex.Lock()
	ret, specificReturn := fake.deleteStalePoliciesReturnsOnCall[len(fake.deleteStalePoliciesArgsForCall)]
	fake.deleteStalePoliciesArgsForCall = append(fake.deleteStalePoliciesArgsForCall, struct{}{})
	fake.recordInvocation("DeleteStalePolicies", []interface{}{})
	fake.deleteStalePoliciesMutex.Unlock()
	if fake.DeleteStalePoliciesStub != nil {
		return fake.DeleteStalePoliciesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStalePoliciesReturns.result1, fake.deleteStalePoliciesReturns.result2
}

func (fake *PolicyCleaner) DeleteStalePoliciesCallCount() int {
	fake.deleteStalePoliciesMutex.RLock()
	defer fake.deleteStalePoliciesMutex.RUnlock()
	return len(fake.deleteStalePoliciesArgsForCall)
}

func (fake *PolicyCleaner) DeleteStalePoliciesReturns(result1 []api.Policy, result2 error) {
	fake.DeleteStalePoliciesStub = nil
	fake.deleteStalePoliciesReturns = struct {
		result1 []api.Policy
		result2 error
	}{result1, result2}
}

func (fake *PolicyCleaner) DeleteStalePoliciesReturnsOnCall(i int, result1 []api.Policy, result2 error) {
	fake.DeleteStalePoliciesStub = nil
	if fake.deleteStalePoliciesReturnsOnCall == nil {
		fake.deleteStalePoliciesReturnsOnCall = make(map[int]struct {
			result1 []api.Policy
			result2 error
		})
	}
	fake.deleteStalePoliciesReturnsOnCall[i] = struct {
		result1 []api.Policy
		result2 error
	}{result1, result2}
}

func (fake *PolicyCleaner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteStalePoliciesMutex.RLock()
	defer fake.deleteStalePoliciesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PolicyCleaner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
